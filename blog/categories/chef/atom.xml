<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Atwam]]></title>
  <link href="http://blog.atwam.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://blog.atwam.com/"/>
  <updated>2013-04-26T00:03:31+01:00</updated>
  <id>http://blog.atwam.com/</id>
  <author>
    <name><![CDATA[Atwam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building `dep_selector` on mac os x]]></title>
    <link href="http://blog.atwam.com/blog/2013/04/25/building-dep-selector-on-mac-os-x/"/>
    <updated>2013-04-25T23:13:00+01:00</updated>
    <id>http://blog.atwam.com/blog/2013/04/25/building-dep-selector-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Just a quick post, having finally figured out how to install dep_selector on mac os x.
The issue is that having xcode installed which configures <code>clang</code> as the default compiler, some native gems break.</p>

<p>It took me some time, but at long least I can now build a native gem using <code>gcc</code> instead of <code>clang</code> on mac os x.
And you'll see it's not very easy to have ruby change its compiler for gems native extensions compilation.</p>

<!-- more -->


<h2>Installing gecode</h2>

<p><code>brew install gecode</code> is supposed to be fine, but it failed for me. The solution was to use llvm :</p>

<p><code>bash
$ brew install gecode --use-llvm
</code></p>

<h2>Install dep_selector</h2>

<p><code>dep_selector</code> uses the standard <code>mkmf</code> to create the makefile that will be used to build the native extension for the gem.
<code>mkmf</code> in turn uses <code>RbConfig</code>, which is defined in <code>rbconfig.rb</code> deep in your ruby source and was generated when your ruby was built.
The issue is that this <code>rbconfig</code> hard codes the value of the <code>CC</code> variable that will be used in the <code>Makefile</code>.</p>

<p><code>gem install dep_selector</code> fails with compilation errors by clang.</p>

<ul>
<li>First solution : modify <code>rbconfig.rb</code> to use <code>ENV['CC']</code> if defined. Yeah, that'd be ugly.</li>
<li>Second solution : manually build the extension and let rubygems know that our gem is installed.</li>
</ul>


<p><code>bash
$ cd $GEM_HOME/gems/dep_selector-0.0.8/ext/dep_gecode
$ # First let's confirm that this was built with the wrong compiler
$ grep clang Makefile
CC = clang
</code></p>

<p>Now let's edit the <code>extconf.rb</code>, adding the following line just before the last (<code>create_makefile()</code> thing).
<code>ruby
%w{CC CXX}.each do |c|
  RbConfig::MAKEFILE_CONFIG[c] = ENV[c] if ENV[c]
end
</code></p>

<p>And let's recreate the <code>Makefile</code> and build our extension.
<code>bash
$ CC=gcc CXX=g++ ruby extconf.rb
$ grep CC Makefile # Should output gcc, great success !
$ make
$ make install # This will copy the library so to a proper ruby directory
</code></p>

<p>We can check that the compilation worked, because there is now a <code>dep_gecode.bundle</code> file.
Now we need to let the gem system know that our gem is added.
<a href="http://docs.rubygems.org/read/chapter/10#page33">The manual for <code>gem install</code></a> tells us that we'll have to copy the gemspec. The following should do the trick :</p>

<p>```bash
$ cd $GEM_HOME/gems/dep_selector-0.0.8
$ gem spec --local ../../cache/dep_selector-0.0.8.gem --ruby > ../../specifications/dep_selector-0.0.8.gemspec
$ gem list dep_selector
<strong><em> LOCAL GEMS </em></strong></p>

<p>dep_selector (0.0.8)
$ irb</p>

<blockquote><blockquote><p>require 'dep_selector'
=> true
exit
```</p></blockquote></blockquote>

<p>That's it, now we can move on and work on our chef install.</p>
]]></content>
  </entry>
  
</feed>
