<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Atwam]]></title>
  <link href="http://blog.atwam.com/atom.xml" rel="self"/>
  <link href="http://blog.atwam.com/"/>
  <updated>2013-05-14T21:23:56+01:00</updated>
  <id>http://blog.atwam.com/</id>
  <author>
    <name><![CDATA[Atwam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Rspec with inherited_resources helpers and inherited views]]></title>
    <link href="http://blog.atwam.com/blog/2013/05/14/using-rspec-with-inherited-resources-helpers-and-inherited-views/"/>
    <updated>2013-05-14T19:51:00+01:00</updated>
    <id>http://blog.atwam.com/blog/2013/05/14/using-rspec-with-inherited-resources-helpers-and-inherited-views</id>
    <content type="html"><![CDATA[<p>I have updated a rails app I have been working on recently to a more recent version of rails 3.2, and all my tests where failing.
Finally managed to have that working, figured I&#8217;d show how.</p>

<h3>Mocking inherited_resources helpers in views specs.</h3>

<p>I know I shouldn&#8217;t be using <a href="https://github.com/josevalim/inherited_resources"><code>inherited_resources</code></a> anymore (<a href="http://stackoverflow.com/questions/9599201/inherited-resources-deperecated-on-rails-3-responders">see here</a> and <a href="http://archives.ryandaigle.com/articles/2009/8/10/what-s-new-in-edge-rails-default-restful-rendering">here</a>) but I want to release my app before I change everything to use responders.</p>

<p>So, my tests where failing because I was using the <code>resource</code>, <code>collection</code> and <code>resource_class</code> helpers from some views I was using. So first my tests are failing because <code>resource_class</code> isn&#8217;t available in my views. I would have thought that the controller helpers were available in the views, but they aren&#8217;t.
The solution is easy. Let&#8217;s add the following to our <code>spec/support</code> directory :</p>

<figure class='code'><figcaption><span>spec/support/view_resource_macros.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ViewResourceMacros</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_resource</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Creates the resource</span>
</span><span class='line'>      <span class="vi">@resource</span> <span class="o">||=</span> <span class="k">yield</span>
</span><span class='line'>      <span class="c1"># Assign to the symbol we wanted, so it&#39;s available in the view</span>
</span><span class='line'>      <span class="n">assign</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="vi">@resource</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># Assigns to @name so that we can use that in our assertions</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="vi">@resource</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># If we pass an array, it&#39;s for stubing a collection, if not it&#39;s for stubbing a single object</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@resource</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:collection</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@resource</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:resource_class</span><span class="p">)</span> <span class="p">{</span><span class="vi">@resource</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">class</span><span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:resource</span><span class="p">)</span> <span class="p">{</span><span class="vi">@resource</span><span class="p">}</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:resource_class</span><span class="p">)</span> <span class="p">{</span><span class="vi">@resource</span><span class="o">.</span><span class="n">class</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">extend</span> <span class="no">ViewResourceMacros</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:view</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And see how to transform our old (failing) test :</p>

<figure class='code'><figcaption><span>spec/views/cars/edit.html.haml_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;cars/edit.html.haml&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assign</span><span class="p">(</span><span class="ss">:car</span><span class="p">,</span> <span class="vi">@car</span> <span class="o">=</span> <span class="no">Factory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:car</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;renders the edit view&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">render</span>
</span><span class='line'>    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="vi">@car</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes :</p>

<figure class='code'><figcaption><span>spec/views/cars/edit.html.haml_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;cars/edit.html.haml&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">has_resource</span><span class="p">(</span><span class="ss">:car</span><span class="p">)</span> <span class="p">{</span> <span class="no">Factory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:car</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;renders the edit view&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">render</span>
</span><span class='line'>    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="vi">@car</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using shared inherited partial in our views specs</h3>

<p>Rails 3.1+ offers views inheritance, so I changed my code to have the following :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BaseController</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CarsController</span> <span class="o">&lt;</span> <span class="no">BaseController</span>
</span><span class='line'>  <span class="n">inherit_resources</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PlanesController</span> <span class="o">&lt;</span> <span class="no">BaseController</span>
</span><span class='line'>  <span class="n">inherit_resources</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I just created a <code>base/new.html.haml</code> and a <code>base/edit.html.haml</code> views, to use the views inheritance.</p>

<figure class='code'><figcaption><span>base/new.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%h1</span> Create <span class="si">#{</span><span class="n">resource_class</span><span class="o">.</span><span class="n">model_name</span><span class="o">.</span><span class="n">human</span><span class="si">}</span>
</span><span class='line'><span class="p">=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s2">&quot;form&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>base/edit.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%h1</span> Edit <span class="si">#{</span><span class="n">resource</span><span class="si">}</span>
</span><span class='line'><span class="p">=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s2">&quot;form&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I have two <code>_form.html.haml</code> partials, one for each controller.
Now the next issue is that our edit and new views are shared, but we still want to test the <code>_form.html.haml</code> partial.</p>

<figure class='code'><figcaption><span>spec/views/cars/_form.html.haml_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="err">&#39;</span><span class="n">spec_helper</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;cars/_form.html.haml&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">:</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Car</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">edit</span><span class="p">:</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Factory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:car</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when called in #</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">has_resource</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;renders the form&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">render</span>
</span><span class='line'>        <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Shared partial</h3>

<p>Finally, when testing for example <code>cars/index.html.haml</code> which uses a partial <code>toolbar.html.haml</code> that actually exists in <code>base</code> views, the following lines are necessary :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">views</span><span class="o">.</span><span class="n">lookup_context</span><span class="o">.</span><span class="n">prefixes</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;base&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was <a href="https://github.com/rails/rails/issues/5213">raised as an issue to the rails team</a>, but they commented (rightly I think) that the inheritance
is related to the controller, not the views, so the test case shouldn&#8217;t know about it and you&#8217;ll have to declare it manually using the lines above.</p>

<p>Now let&#8217;s go back and make these tests green again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From pow to a deployed rails app using chef, capistrano and vagrant - Part 1]]></title>
    <link href="http://blog.atwam.com/blog/2013/04/27/preparing-a-rails-app-for-deployment-using-chef-solo/"/>
    <updated>2013-04-27T22:09:00+01:00</updated>
    <id>http://blog.atwam.com/blog/2013/04/27/preparing-a-rails-app-for-deployment-using-chef-solo</id>
    <content type="html"><![CDATA[<p>So, let&#8217;s be honest, I&#8217;ve been quite lazy here. My latest rails application was deployed with Heroku. Lots of fun, a very pleasant experience.
But now I have this new shinny application that I don&#8217;t want to deploy using Heroku :</p>

<ul>
<li>Because I am worried that if I start with Heroku, I&#8217;ll be too lazy to switch later.</li>
<li>Because I know that at some point, my application is going to need plugins and binaries that I can&#8217;t get on Heroku.</li>
<li>Because I&#8217;d rather have a portable application that I can deploy easily on any type of server.</li>
</ul>


<!-- more -->


<h2>1. Planning and strategy</h2>

<p>I have this nice application, let&#8217;s call it cube. So far it has lived very happily in rails dev environment, run only by the marvelous <a href="http://pow.cx">pow</a>.</p>

<p>My goal is to have :</p>

<ul>
<li>A server configuration using chef</li>
<li>An easy deployment using capistrano</li>
<li>A way to locally run a copy of the server deployment using vagrant</li>
</ul>


<p>This should allow me to easily change/add services on my box, and scale it up should the need arise.
So, the plan is the following :</p>

<ol>
<li>Install <code>vagrant</code>, that I&#8217;ll use to launch virtualized servers to test my chef configuration.</li>
<li>Prepare a chef configuration for two roles : app server and database server.
I&#8217;ll start by having the same machine (in vagrant for now) running the two roles, knowing that I&#8217;ll be able to split that to more servers if I need to scale.</li>
<li>Setup capistrano on my rails app to have it deploy nicely to my machines.</li>
</ol>


<h2>2. Vagrant for testing locally the server configuration</h2>

<p>Well, it&#8217;ll be short. Head over to <a href="http://www.vagrantup.com">vagrant&#8217;s website</a> where its marvelous developper has done a very complete getting-started guide.
Once installed (and don&#8217;t forget to install virtualbox too), I&#8217;m pretty much following it.
I&#8217;ll chose the <code>precise64</code> box, an ubuntu 64 bits image, but you can of course choose another box found <a href="http://www.vagrantbox.es/">here</a></p>

<p>I&#8217;ll start by creating a directory that will hold our deployment related configuration : vagrant and chef&#8217;s config.
I have chosen to have this directory separate from my application&#8217;s directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir deployment <span class="o">&amp;&amp;</span> <span class="nb">cd </span>deployment
</span><span class='line'><span class="nv">$ </span>vagrant init
</span><span class='line'><span class="nv">$ </span>vagrant box add precise64 http://files.vagrantup.com/precise64.box <span class="c"># Downloads the box</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then let&#8217;s edit our <code>Vagrantfile</code> to change a few defaults to better suit us :</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise64&quot;</span>
</span><span class='line'>  <span class="c1"># This line ensures that we&#39;ll know where to find the box should we clone our deployment repo on another computer</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;http://files.vagrantup.com/precise64.box&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just start the box with <code>vagrant up</code> and check that we manage to connect to it using <code>vagrant ssh</code>. It&#8217;s working, great, we have a blank slate to work on !</p>

<h2>3. Chef in the kitchen</h2>

<p><a href="http://www.opscode.com/chef/">Chef</a> will be used to handle the configuration/bootstrapping of my servers.
I&#8217;ve done my fair share of playing with ssh in the past, only to realize that administering a server for a side project using ssh is fun until
you have to come back to it after a few months and remember where all the things are and where you should do you change.</p>

<p>With chef, the configuration is stored on git, and if I need to change anything, there&#8217;s only one place to go.
Soooo, let&#8217;s start.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># I&#39;m still in my deployment directory that I created earlier</span>
</span><span class='line'><span class="nv">$ </span>cat &gt; Gemfile <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">source :rubygems</span>
</span><span class='line'>
</span><span class='line'><span class="s">gem &quot;chef&quot; # The main gem</span>
</span><span class='line'><span class="s">gem &quot;knife-solo&quot; # Chef solo to bootstrap/configure chef on individual machines through ssh</span>
</span><span class='line'><span class="s">gem &quot;berkshelf&quot; # To manage cookbooks</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>If you see an error requesting gecode when you run <code>bundle install</code> then <code>brew install --use-llvm gecode</code> should be good enough to make it work.
It may be a bit more complicated than that, just look at <a href="http://blog.atwam.com/blog/2013/04/25/building-dep-selector-on-mac-os-x/">this blog post</a> if you have issues installing the gems above.</p>

<p>That should cover the installation of the main <code>chef</code> gem and of <code>knife-solo</code>. Chef can be configured to use with a chef server (useful to manage many machines)
but for now I&#8217;ll be using <code>knife-solo</code> (also known as chef-solo) which should be good enough.</p>

<p>Now let&#8217;s initiate a chef repository in my directory. This repository will hold all the configuration for the server(s) I am going to deploy to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife solo init . <span class="c"># Creates the chef-repo here</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have read a bit about chef (of course you have), you know that one of the main ingredients (ahah) are the <em>cookbooks</em>.
Opscode has gathered many cookbooks contributed by the community.
The standard way of installing these cookbook is through <code>knife cookbook site install blah</code>, but I have included the <a href="http://berkshelf.com/">berkshelf</a> gem which will handle
our <code>cookbooks</code> directory for us and get all the proper cookbooks and their dependencies. The list of cookbooks is managed in a <code>Berksfile</code>.</p>

<p>For now, let&#8217;s start by installing some cookbooks. We&#8217;ll see later to configure them and our app.</p>

<figure class='code'><figcaption><span>Berksfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">site</span> <span class="ss">:opscode</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;apt&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;build-essential&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;nginx&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;database&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few comments on these cookbooks ..</p>

<p>apt
: Used to make sure this package manager is installed on the ubuntu box that we&#8217;ll be using.</p>

<p>build-essential
: Make sure we can build stuff. This one will be included anyway since it&#8217;s a dependency of for many other packages.</p>

<p><a href="http://community.opscode.com/cookbooks/nginx">nginx</a>
: Planning to use this lightweight web server to serve our rails app</p>

<p><a href="http://community.opscode.com/cookbooks/database">database</a>
: This cookbook is an alternative to the <a href="http://community.opscode.com/cookbooks/postgresql"><code>postgresql</code></a>. It can install mysql or postgresql and should allow us later to use a master/slave configuration.</p>

<p>Now let&#8217;s make sure these cookbooks are there and available :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>berks install
</span></code></pre></td></tr></table></div></figure>


<h2>4. Make vagrant use chef</h2>

<p>Now we&#8217;ll need to make vagrant use our chef cookbooks and recives, so that we&#8217;ll be able to test our chef configuration.
For now we&#8217;ll just make sure it installs correctly a simple recipe (git, for example). We&#8217;ll cover the proper configuration
of our servers in a later post.</p>

<p>Since we are using berkshelf to manage our cookbooks, we&#8217;d better use the <code>vagrant-berkshelf</code> plugin :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant plugin install vagrant-berkshelf
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s add a few lines in our <code>Vagrantfile</code> :</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># [snip] our previous config</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">berkshelf</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:chef_solo</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># The following is not necessary because we use berkshelf</span>
</span><span class='line'>    <span class="c1"># chef.cookbooks_path = &quot;cookbooks&quot;</span>
</span><span class='line'>    <span class="n">chef</span><span class="o">.</span><span class="n">roles_path</span> <span class="o">=</span> <span class="s2">&quot;roles&quot;</span>
</span><span class='line'>    <span class="n">chef</span><span class="o">.</span><span class="n">data_bags_path</span> <span class="o">=</span> <span class="s2">&quot;data_bags&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># For now let&#39;s just install git to check that our chef provisioning is working</span>
</span><span class='line'>    <span class="n">chef</span><span class="o">.</span><span class="n">add_recipe</span> <span class="s2">&quot;git&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># We&#39;ll use the following later</span>
</span><span class='line'>    <span class="c1"># chef.add_role &quot;web&quot; </span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to <code>vagrant reload</code> to make vagrant recreate a machine and install the required chef folders,
then <code>vagrant provision</code> to make chef-solo install whatever is needed. A <code>vagrant ssh</code> followed by a <code>git --version</code>
should help you verify that our chef provisionning worked.</p>

<p>You can see in our <code>Vagrantfile</code> above that we just asked chef-solo to run the <code>git</code> recipe.
Looking at <a href="http://community.opscode.com/cookbooks/git">git cookbook&#8217;s documentation</a>,
we can see that this will run the <code>git::default</code> recipe of this cookbook, which should just install git.</p>

<p>Let&#8217;s remember that in the future running <code>vagrant provision</code> will rerun chef on our vm, so we&#8217;ll
be able to quickly test our changes in config.</p>

<h2>5. Server and app configuration with chef</h2>

<p>I&#8217;ll cover that in my next post.</p>

<h3>References</h3>

<p><a href="http://www.slideshare.net/SmartLogic/practical-chef-and-capistrano-for-your-rails-app">Practical chef and capistrano for your rails app</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building dep_selector on mac os x]]></title>
    <link href="http://blog.atwam.com/blog/2013/04/25/building-dep-selector-on-mac-os-x/"/>
    <updated>2013-04-25T23:13:00+01:00</updated>
    <id>http://blog.atwam.com/blog/2013/04/25/building-dep-selector-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Just a quick post, having finally figured out how to install dep_selector on mac os x.
The issue is that having xcode installed which configures <code>clang</code> as the default compiler, some native gems break.</p>

<p>It took me some time, but at long least I can now build a native gem using <code>gcc</code> instead of <code>clang</code> on mac os x.
And you&#8217;ll see it&#8217;s not very easy to have ruby change its compiler for gems native extensions compilation.</p>

<!-- more -->


<h2>Installing gecode</h2>

<p><code>brew install gecode</code> is supposed to be fine, but it failed for me. The solution was to use llvm :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install gecode --use-llvm
</span></code></pre></td></tr></table></div></figure>


<h2>Install dep_selector</h2>

<p><code>dep_selector</code> uses the standard <code>mkmf</code> to create the makefile that will be used to build the native extension for the gem.
<code>mkmf</code> in turn uses <code>RbConfig</code>, which is defined in <code>rbconfig.rb</code> deep in your ruby source and was generated when your ruby was built.
The issue is that this <code>rbconfig</code> hard codes the value of the <code>CC</code> variable that will be used in the <code>Makefile</code>.</p>

<p><code>gem install dep_selector</code> fails with compilation errors by clang.</p>

<ul>
<li>First solution : modify <code>rbconfig.rb</code> to use <code>ENV['CC']</code> if defined. Yeah, that&#8217;d be ugly.</li>
<li>Second solution : manually build the extension and let rubygems know that our gem is installed.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$GEM_HOME</span>/gems/dep_selector-0.0.8/ext/dep_gecode
</span><span class='line'><span class="nv">$ </span><span class="c"># First let&#39;s confirm that this was built with the wrong compiler</span>
</span><span class='line'><span class="nv">$ </span>grep clang Makefile
</span><span class='line'><span class="nv">CC</span> <span class="o">=</span> clang
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s edit the <code>extconf.rb</code>, adding the following line just before the last (<code>create_makefile()</code> thing).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{CC CXX}</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="no">RbConfig</span><span class="o">::</span><span class="no">MAKEFILE_CONFIG</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="n">c</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And let&#8217;s recreate the <code>Makefile</code> and build our extension.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ CC</span><span class="o">=</span>gcc <span class="nv">CXX</span><span class="o">=</span>g++ ruby extconf.rb
</span><span class='line'><span class="nv">$ </span>grep CC Makefile <span class="c"># Should output gcc, great success !</span>
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>make install <span class="c"># This will copy the library so to a proper ruby directory</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can check that the compilation worked, because there is now a <code>dep_gecode.bundle</code> file.
Now we need to let the gem system know that our gem is added.
<a href="http://docs.rubygems.org/read/chapter/10#page33">The manual for <code>gem install</code></a> tells us that we&#8217;ll have to copy the gemspec. The following should do the trick :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$GEM_HOME</span>/gems/dep_selector-0.0.8
</span><span class='line'><span class="nv">$ </span>gem spec --local ../../cache/dep_selector-0.0.8.gem --ruby &gt; ../../specifications/dep_selector-0.0.8.gemspec
</span><span class='line'><span class="nv">$ </span>gem list dep_selector
</span><span class='line'>*** LOCAL GEMS ***
</span><span class='line'>
</span><span class='line'>dep_selector <span class="o">(</span>0.0.8<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>irb
</span><span class='line'>&gt;&gt; require <span class="s1">&#39;dep_selector&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>&gt;&gt; <span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it, now we can move on and work on our chef install.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple persistent stores and seed data with core data]]></title>
    <link href="http://blog.atwam.com/blog/2012/05/11/multiple-persistent-stores-and-seed-data-with-core-data/"/>
    <updated>2012-05-11T23:20:00+01:00</updated>
    <id>http://blog.atwam.com/blog/2012/05/11/multiple-persistent-stores-and-seed-data-with-core-data</id>
    <content type="html"><![CDATA[<p>I haven&#8217;t posted anything for a while now, and after hours of trying to find a solution to my problem, I thought I should share. So here we go.</p>

<h3>The problem</h3>

<p>Your nice and shiny iOS app is supposed to have two data components : <strong>User data</strong> and <strong>Seed data</strong>.
For example, you want to have some (seeded) list of postcodes. The size of data is too big to be shipped with your app,
and we assume that the model is too complex to be just filled by your application at runtime from a downloaded csv/txt file.</p>

<p>So, you start thinking that hey, you&#8217;ll generate a sqlite database (<em>persistent data store</em> as they say), put it on a server and have your app download and use it.
You can either duplicate the whole stack (<code>NSManagedObjectContext</code>, <code>NSPersistentStoreCoordinator</code> and <code>NSManagedObjectModel</code>) or, according to apple :</p>

<p><em>You typically use configurations if you want to store different entities in
 different stores. A persistent store coordinator can only have one managed
 object model, so by default each store associated with a given coordinator
 must contain the same entities. To work around this restriction, you can
 create a model that contains the union of all the entities you want to use.
 You then create configurations in the model for each of the subsets of
 entities that you want to use. You can then use this model when you create a
 coordinator. When you add stores, you specify the different store attributes
 by configuration. When you are creating your configurations, though, remember
 that you cannot create cross-store relationships.</em></p>

<p>Well, that&#8217;s pretty much all the doc you&#8217;ll get from apple.
There are a few mentions of this problem <a href="http://stackoverflow.com/questions/9970103/what-is-an-efficient-way-to-merge-two-ios-core-data-persistent-stores">there</a>
<a href="http://stackoverflow.com/questions/10224016/coredata-with-multiple-stores-configuration-woes">or there</a>
but not in a clear enough form for me. So, here&#8217;s how it works&#8230;</p>

<!-- more -->


<h3>Models</h3>

<p>We want to have two separate models (because that&#8217;s the way it is, or because your seed data can be used in apps that have nothing to do with this one).
Let&#8217;s create two models in xcode (I&#8217;ll be using dumb <em>Model</em>, <em>Conf</em> suffixes just to help understanding) :</p>

<ul>
<li>Our <em>UserModel</em> model has one entity <code>Rating</code> with two attributes : <code>postcode</code> (an <code>NSString</code>) and <code>rating</code> (an integer).</li>
<li>Our <em>PostCodesModel</em> model has two entities <code>Postcode</code> (with a <code>postcode</code> attribute, and let&#8217;s say some location and address attributes), and <code>Counties</code> that
which postcode belongs to which county.</li>
</ul>


<blockquote><p>We assume that we have already generated a &#8216;PostCodes.sqlite&#8217; using normal core data stuff, based on <code>PostCodesModel</code> only. That&#8217;s the seed file we&#8217;ll want to download.</p></blockquote>

<h3>How it&#8217;ll work</h3>

<p>Since we can only have one model for one <code>NSPersistentStoreCoordinator</code>, we&#8217;ll need to merge our two models.
We&#8217;ll create one configuration in each model, with the entities of this model.
We&#8217;ll then add two <code>NSPersistentStore</code>, one per <code>.sqlite</code> file, and with a configuration set up to make sure that core data
uses the correct store for the correct entities.</p>

<h3>Adding configurations.</h3>

<p>We add one configuration named <em>UserConf</em> to our <em>UserModel</em> model, and drag &amp; drop all our entities to it.
We do the same with a <em>PostCodesConf</em> configuration for our postcodes model.</p>

<h3>Creating a merged model</h3>

<p>We change our <code>-(NSManagedObjectModel*)managedObjectModel</code> to the following :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span><span class="n">managedObjectModel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">__managedObjectModel</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">__managedObjectModel</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">uModelURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;UserModel&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSManagedObjectModel</span><span class="o">*</span> <span class="n">uModel</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL:</span><span class="n">uModelURL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">pdModelURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;PostCodesModel&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSManagedObjectModel</span><span class="o">*</span> <span class="n">pdModel</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL:</span><span class="n">pdModelURL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">__managedObjectModel</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSManagedObjectModel</span> <span class="nl">modelByMergingModels:</span><span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="n">uModel</span><span class="p">,</span> <span class="n">pdModel</span><span class="p">,</span> <span class="nb">nil</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">__managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our new model should now have our three entities, and two configurations : <em>UserConf</em> for our <code>Rating</code> entity, and <em>PostcodesConf</em> for the two others.</p>

<h3>Creating a persistent store</h3>

<p>That&#8217;s where the difficulty is. One would think that just calling <code>addPersistentStoreWithType:configuration:URL:options:error</code>
once per <em>.sqlite</em> file with the correct configuration would be enough. It isn&#8217;t. When you add the first one (our postcodes data),
it finds that the store (our downloaded sqlite file) wasn&#8217;t created with this model : we only used the <code>PostCodesModel</code> model to create
our <em>.sqlite</em> file, not our merged model that we are now using.</p>

<p>We could then think of using migration, but then the migrated model used by core data when migrating won&#8217;t have
our <em>PostCodesConf</em> configuration anymore. <em>I think that&#8217;s a bug of core data</em>.
The solution is to :</p>

<ol>
<li>Add the <code>postcodes.sqlite</code> persistent store, <em>without a configuration, but with the auto-migration options</em>. Core data will figure out
that his sqlite file has just some missing tables (the <em>UserModel</em> tables). This store needs to be writable for the migration to work
properly.</li>
<li>Remove our newly created persistent store (he had a default configuration, we want him to use <em>UserConf</em>.</li>
<li>Add the same persistent store again, which has now the correct metadata and can be used with our merged model.</li>
<li>The user data sqlite file is usually fine, because it&#8217;s created with the merged model anyway when the app run.
If not, you could think of using <a href="http://www.cimgf.com/2009/05/03/core-data-and-plug-ins/">this plugin architecture</a></li>
</ol>


<p>Here is what I end up with :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="p">)</span><span class="n">persistentStoreCoordinator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">__persistentStoreCoordinator</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">__persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithManagedObjectModel:</span><span class="p">[</span><span class="n">self</span> <span class="n">managedObjectModel</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">addSeedDataToCoordinator:</span><span class="n">__persistentStoreCoordinator</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSURL</span><span class="o">*</span> <span class="n">userURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">applicationDocumentsDirectory</span><span class="p">]</span> <span class="nl">URLByAppendingPathComponent:</span><span class="s">@&quot;UserData.sqlite&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Note that we use our UserConf here</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">__persistentStoreCoordinator</span> <span class="nl">addPersistentStoreWithType:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration:</span><span class="s">@&quot;UserConf&quot;</span> <span class="nl">URL:</span><span class="n">userURL</span> <span class="nl">options:</span><span class="nb">nil</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error %@&quot;</span><span class="p">,</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">addSeedDataToCoordinator:</span><span class="p">(</span><span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="p">)</span><span class="n">storeCoordinator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Our destination url, writtable. Make sure this is in Library/Cache if you don&#39;t want iCloud to backup this.</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">applicationDocumentsDirectory</span><span class="p">]</span> <span class="nl">URLByAppendingPathComponent:</span><span class="s">@&quot;Postcodes.sqlite&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If we don&#39;t have our migrated store, prepare it</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">fileExistsAtPath:</span><span class="p">[</span><span class="n">storeURL</span> <span class="n">path</span><span class="p">]])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Our source url should come from a download, but let&#39;s use our bundle for debug purposes in the simulator</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">baseURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;Postcodes&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;sqlite&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">copyItemAtURL:</span><span class="n">baseURL</span> <span class="nl">toURL:</span><span class="n">adURL</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create one coordinator that just migrates, but isn&#39;t used.</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>      <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSMigratePersistentStoresAutomaticallyOption</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSInferMappingModelAutomaticallyOption</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This will just handle the migration, without any configuration or else ...</span>
</span><span class='line'>    <span class="n">NSPersistentStore</span><span class="o">*</span> <span class="n">tmpStore</span> <span class="o">=</span> <span class="p">[</span><span class="n">storeCoordinator</span> <span class="nl">addPersistentStoreWithType:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration:</span><span class="nb">nil</span> <span class="nl">URL:</span><span class="n">storeURL</span> <span class="nl">options:</span><span class="n">options</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// And remove it !</span>
</span><span class='line'>    <span class="p">[</span><span class="n">storeCoordinator</span> <span class="nl">removePersistentStore:</span><span class="n">tmpStore</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// And now add the coordinator with the correct &#39;PostCodesConf&#39; configuration, in readonly mode</span>
</span><span class='line'>  <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSReadOnlyPersistentStoreOption</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">storeCoordinator</span> <span class="nl">addPersistentStoreWithType:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration:</span><span class="s">@&quot;PostCodesConf&quot;</span> <span class="nl">URL:</span><span class="n">storeURL</span> <span class="nl">options:</span><span class="n">options</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Well, adding a bit more information, or a sample somewhere could have been helpful, apple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spell checking should be part of your view tests]]></title>
    <link href="http://blog.atwam.com/blog/2012/02/25/spell-checking-should-be-part-of-your-view-tests/"/>
    <updated>2012-02-25T21:16:00+00:00</updated>
    <id>http://blog.atwam.com/blog/2012/02/25/spell-checking-should-be-part-of-your-view-tests</id>
    <content type="html"><![CDATA[<p>So it all started when I asked a friend to test this new app I&#8217;m building :
&#8220;On your main page, <em>garantee</em>. You should really check your spelling, people will know you are French !&#8221;.</p>

<p>So here I went, naively googling for &#8220;website spell checker&#8221;, with either pricey reports or simple websites
where I&#8217;d have to copy-paste my text from all my pages. Then, I found <a href="http://afterthedeadline.com/">AfterTheDeadline</a>.
It looks great, open-source, recently bought by wordpress.com, and they even provide an API.</p>

<p>So, spent my evening doing stuff, and here we are with a new gem : <a href="https://rubygems.org/gems/merimee">Merimee</a> (<a href="http://github.com/atwam/merimee/">github</a>).</p>

<!-- more -->


<h2>What does it do ?</h2>

<p>It gives you some rspec macros to test your views spelling, and fails your tests if it finds errors.</p>

<h2>Install</h2>

<p>So here we are with our existing rails project. Installation is very easy :</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># :require =&gt; false is mandatory, or the gem may not hook properly into rspec</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;merimee&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">prefork</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;merimee&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/views/splash/index.html_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;splash/index&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it_should_have_a_correct_spelling</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And voilà, your test should still be green, or fail if there&#8217;s a spelling error :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rbcon'><span class='line'><span class="go">Failures:</span>
</span><span class='line'>
</span><span class='line'><span class="go">  1) splash/index should have a correct spelling</span>
</span><span class='line'><span class="go">     Failure/Error: rendered.should have_a_correct_spelling</span>
</span><span class='line'><span class="go">      [error : spelling - Spelling] garantee (suggested: guarantee)</span>
</span><span class='line'><span class="go">      [error : spelling - Spelling] faq (suggested: far, fat, fan, fax, fad)</span>
</span><span class='line'><span class="go">     # /Users/wam/Dev/merimee/lib/merimee/rspec/view_checker_helper.rb:27:in `block in it_should_have_a_correct_spelling&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="go">Finished in 1.84 seconds</span>
</span><span class='line'><span class="go">1 example, 1 failure</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have a look at the <a href="https://github.com/atwam/merimee">readme</a> to see how you can configure the gem :
you can choose which errors make your test fail, and configure your own dictionary to ignore some
spelling errors.</p>

<h2>Warning</h2>

<p>Since AtD server will reject your requests if they are too close from each other, the macro has a nasty <code>sleep 0.7</code> to make
sure it doesn&#8217;t happen. If you find a better solution, send me a pull request. You may want to have these tests only run
in some test groups.</p>

<h2>Planned features ?</h2>

<p>Oh, I have a few ideas : add a rake task with a full report, for all views, including both errors (spelling etc.) and warnings (grammar warnings
generated by AtD, like repetitions, double negations etc.
I want to enable merimee in Test::Case as well, but I&#8217;m not so used to it.</p>

<p>Feel free to fork and send me your pull requests, or just point any issue you have.</p>
]]></content>
  </entry>
  
</feed>
